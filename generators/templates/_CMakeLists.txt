cmake_minimum_required(VERSION <%= cmake_version %>})
include(BuildInfo)
project(
  ${BUILD_JSON_NAME}
  VERSION ${BUILD_JSON_VERSION}
  HOMEPAGE_URL ${BUILD_JSON_HOMEPAGE}
  LANGUAGES C CXX)

<%_ if(clang) { -%>
option(ENABLE_CLANG_TIDY "Enable clang-tidy" ON)
if(ENABLE_CLANG_TIDY)
  include(ClangTidy)
  enable_clang_tidy()
endif()
<%_ } -%>

<%_ if(doxygen) { -%>
option(ENABLE_DOXYGEN "Build documentation using Doxygen" ON)
if(ENABLE_DOXYGEN)
  include(Doxygen)
endif()
<%_ } -%>

list(APPEND <%= cmake_prefix %>COMPILE_OPTS
  <%_ compile_options.forEach(function(opt) { -%>
  <%- opt -%>
  <%_ }) -%>)

<%_ if(clang) { -%>
option(ENABLE_COVERAGE "Enable code coverage reports using gcov/lcov" OFF)
if(ENABLE_COVERAGE)
  include(Coverage)
  # TODO: cleanup this logic, get it into Coverage.cmake
  if(${CMAKE_CXX_COMPILER_ID} MATCHES "([aA]pple)?[cC]lang|GNU")
    list(
      APPEND
      <%= cmake_prefix %>COMPILE_OPTS
      -O0
      -g
      -fprofile-instr-generate
      -fcoverage-mapping
      --coverage)
    list(APPEND <%= cmake_prefix %>LIBRARIES -fprofile-instr-generate -fprofile-instr-generate
         -fcoverage-mapping --coverage)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # TODO: implement
  else()
    message(FATAL_ERROR "unsupported compiler: ${CMAKE_CXX_COMPILER_ID}")
  endif()
endif()
<%_ } -%>

<%_ if(packages.length >= 1) { -%>
<%_ packages.forEach(function(pkg) { -%>
find_package(<%= pkg.name -%><%_ if (pkg.vcpkg) { -%> CONFIG<%_ } -%> <%_ if (pkg.required) { -%> REQUIRED<%_ } -%>)
<%_ }) -%>
<%_ } -%>

link_libraries(<%= packages.filter((pkg) => pkg.link).flatMap((pkg) => pkg.link).join(" ") -%>)

if(CMAKE_BUILD_TYPE MATCHES "^[Dd]ebug")
  add_compile_definitions(<%= cmake_prefix %>DEBUG)
endif()

add_subdirectory(Sources)

option(ENABLE_TESTS "Enable tests." ON)
if(ENABLE_TESTS)
  add_subdirectory(Tests)
endif()

option(ENABLE_BENCHMARKS "Enable benchmarks." ON)
if(ENABLE_BENCHMARKS)
  add_subdirectory(Benchmarks)
endif()
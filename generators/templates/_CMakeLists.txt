cmake_minimum_required(VERSION <%= cmake_version %>})
include(BuildInfo)
project(
  ${BUILD_JSON_NAME}
  VERSION ${BUILD_JSON_VERSION}
  HOMEPAGE_URL ${BUILD_JSON_HOMEPAGE}
  LANGUAGES C CXX)

<%_ if(clang_tidy) { -%>
option(ENABLE_CLANG_TIDY "Enable clang-tidy" ON)
if(ENABLE_CLANG_TIDY)
  include(ClangTidy)
  enable_clang_tidy()
endif()
<%_ } -%>

<%_ if(doxygen) { -%>
option(ENABLE_DOXYGEN "Build documentation using Doxygen" ON)
if(ENABLE_DOXYGEN)
  include(Doxygen)
endif()
<%_ } -%>

list(APPEND <%= cmake_prefix %>_COMPILE_OPTS
  <%_ compile_options.forEach(function(opt) { -%>
  <%- opt -%>
  <%_ }) -%>)

<%_ if(coverage) { -%>
option(ENABLE_COVERAGE "Enable code coverage reports using gcov/lcov" ON)
if(ENABLE_COVERAGE)
  include(CodeCoverage)
  # TODO: cleanup this logic, get it into Coverage.cmake
  if(${CMAKE_CXX_COMPILER_ID} MATCHES "([aA]pple)?[cC]lang|GNU")
    list(
      APPEND
      <%= cmake_prefix %>_COMPILE_OPTS
      -O0
      -g
      -fprofile-instr-generate
      -fcoverage-mapping
      --coverage)
    list(APPEND <%= cmake_prefix %>_LIBRARIES -fprofile-instr-generate -fprofile-instr-generate
         -fcoverage-mapping --coverage)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # TODO: implement
  else()
    message(FATAL_ERROR "unsupported compiler: ${CMAKE_CXX_COMPILER_ID}")
  endif()
endif()
<%_ } -%>

<% packages.forEach(function(pkg) { -%>
find_package(<%= pkg.name %><%_ if (pkg.config) { %> CONFIG<% } %> <%_ if (pkg.required) { %> REQUIRED<% } %>)
<% }) -%>

if(CMAKE_BUILD_TYPE MATCHES "^[Dd]ebug")
  add_compile_definitions(<%= header_prefix %>_DEBUG)
endif()

link_libraries(
  <%_ packages.forEach(function(pkg) { -%>
    <%_ if(pkg.link) { -%>
    <%_ pkg.link.forEach(function(lib) { -%>
  <%= lib -%>
    <%_ }) -%>
    <%_ } -%>
  <%_ }) -%>)

add_subdirectory(Sources)

option(ENABLE_TESTS "Enable tests." ON)
if(ENABLE_TESTS)
  add_subdirectory(Tests)
endif()

option(ENABLE_BENCHMARKS "Enable benchmarks." ON)
if(ENABLE_BENCHMARKS)
  add_subdirectory(Benchmarks)
endif()

<%_ if(executable) { %>
add_executable(<%= project_name %>
  main.cc)
target_link_libraries(<%= project_name %>
  <%= library_name -%>)
<%_ } %>